#pragma once

#include "gdl/base/string.h"
#include "gdl/base/container/map.h"

#include <GL/glew.h>
#include <GL/freeglut.h>

namespace GDL::OpenGL
{

enum class OutputMethod
{
    COUT,
    EXCEPTION,
    LOGGER,
    NONE
};

//! @brief Processes the log messages that are generated by the OpenGL 4.3 debug context
class DebugMessageHandler
{
    friend class ContextGLUT;

    Map<GLenum, OutputMethod> mTypeOutputMethod;
    bool mInitialized = false;


    DebugMessageHandler();

public:
    DebugMessageHandler(const DebugMessageHandler&) = delete;
    DebugMessageHandler(DebugMessageHandler&&) = delete;
    DebugMessageHandler& operator=(const DebugMessageHandler&) = delete;
    DebugMessageHandler& operator=(DebugMessageHandler&&) = delete;
    ~DebugMessageHandler() = default;

    //! @brief Sets the OpenGL debug callback function. This is only done during the first function call. Afterwards it
    //! does nothing to avoid accidentally overwriting user defined debug callbacks.
    void Initialize();

    //! @brief Returns if the class is already initialized
    //! @return True / False
    bool IsInitialized() const;

    //! @brief Gets the output method of the specified message type
    //! @param type: Type enum
    //! @return Output method enum
    OutputMethod GetOutputMethod(GLenum type) const;

    //! @brief Sets the output method of the specified message type
    //! @param type: Type enum
    //! @param outputMethod: Output method enum
    void SetOutputMethod(GLenum type, OutputMethod outputMethod);

private:
    //! @brief Casts the severity enum to a string
    //! @param severity: Severity enum
    //! @return Severity enum as string
    static const char* GetSeverityString(GLenum severity);

    //! @brief Casts the source enum to a string
    //! @param source: Source enum
    //! @return Source enum as string
    static const char* GetSourceString(GLenum source);

    //! @brief Casts the type enum to a string
    //! @param type: Type enum
    //! @return Type enum as string
    static const char* GetTypeString(GLenum type);

    //! @brief Generates a debug message from the debug callbacks input parameters
    //! @param source: Source enum
    //! @param type: Type enum
    //! @param id: Message id
    //! @param severity: Severity enum
    //! @param message: The error message
    //! @return Debug message
    static String GenerateMessage(GLenum source, GLenum type, GLuint id, GLenum severity, const GLchar* message);

    //! @brief Debug callback function that is regitered to the debug context if a instance of this class is initialized
    //! @param source: Source enum
    //! @param type: Type enum
    //! @param id: Message id
    //! @param severity: Severity enum
    //! @param length: Length of the message
    //! @param message: The error message
    //! @param userParam: Address of an instance of this class
    //! @remark The interface of this class is prescribed by the OpenGL API
    static void DebugCallback(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length,
                              const GLchar* message, const void* userParam);
};


} // namespace GDL::OpenGL
